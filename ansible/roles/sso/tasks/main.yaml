- name: Create SSO Operator Group
  k8s:
    state: present
    namespace: '{{ cluster_project }}'
    resource_definition: "{{ lookup('template', 'sso-operatorgroup.yaml.j2') }}"

- name: Create SSO Subscription
  k8s:
    state: present
    namespace: '{{ cluster_project }}'
    resource_definition: "{{ lookup('template', 'sso-subscription.yaml.j2') }}"

- name: Wait for SSO operator to install
  k8s_info:
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: keycloaks.keycloak.org
    namespace: '{{ cluster_project }}'
  register: crd_sso
  until: crd_sso.resources | list | length == 1
  retries: 10
  delay: 30

- name: Create the SSO tls secret
  k8s:
    state: present
    resource_definition:  "{{ lookup('template', 'sso-tls-secret.yaml.j2') }}"

- name: Create the SSO DB secret
  k8s:
    state: present
    resource_definition:  "{{ lookup('template', 'sso-db-secret.yaml.j2') }}"

- name: Create the SSO DB
  k8s:
    state: present
    resource_definition:  "{{ lookup('template', 'sso-db.yaml.j2') }}"


- name: Create the SSO Instance CR
  k8s:
    state: present
    resource_definition:  "{{ lookup('template', 'sso-instance.yaml.j2') }}"

# - name: Wait for SSO to be running
#   uri:
#     url: "https://keycloak-{{ cluster_project }}.apps.{{ domain }}"
#     method: GET
#   register: _result
#   until: _result.status == 200
#   retries: 10
#   delay: 30

- name: Create Realm
  k8s:
    state: present
    resource_definition:  "{{ lookup('template', 'sso-realm.yaml.j2') }}"


- name: Retrieve SSO admin credentials
  k8s_info:
    kind: Secret
    name: keycloak-initial-admin
    namespace: '{{ cluster_project }}'
  register: _sso_credentials


- set_fact:
    _sso_admin_user: '{{ _sso_credentials.resources[0].data.username | b64decode }}'
    _sso_admin_password: '{{ _sso_credentials.resources[0].data.password | b64decode }}'

# - name: Get SSO Token
#   uri: 
#     url: 'https://keycloak-{{ cluster_project }}.apps.{{ domain }}/auth/realms/master/protocol/openid-connect/token'
#     method: POST
#     body_format: form-urlencoded
#     body: 
#       username: '{{_sso_admin_user}}'
#       password: '{{_sso_admin_password}}'
#       grant_type: password 
#       client_id: admin-cli
#     return_content: yes
#     validate_certs: no
#     status_code: 200
#   register: token_text

# - set_fact: 
#     TKN: '{{ token_text.json.access_token }}'

# - name: Increase Token Lifespan (60mins)
#   uri:
#     url: 'https://keycloak-{{ cluster_project }}.apps.{{ domain }}/auth/admin/realms/master'
#     method: PUT
#     body: "{\"realm\":\"master\", \"accessTokenLifespan\":\"3600\"}"
#     body_format: json
#     headers:
#       Content-Type: "application/json"
#       Authorization: "Bearer {{ TKN }}"
#     return_content: yes
#     validate_certs: no
#     status_code: 204

# - name: Get Admin Token with Longer Lifespan
#   uri:
#     url: https://keycloak-{{ cluster_project }}.apps.{{ domain }}/auth/realms/master/protocol/openid-connect/token
#     method: POST
#     body_format: form-urlencoded
#     body:
#       username: '{{_sso_admin_user}}'
#       password: '{{_sso_admin_password}}'
#       grant_type: password 
#       client_id: admin-cli
#     status_code: '200'
#     return_content: yes
#     validate_certs: no    
#   register: token_result

# - name: Extract Admin Token with Longer Lifespan from Keycloack from result
#   set_fact:
#     TKN: '{{token_result.json.access_token}}'

# - name: Create Threescale Realm
#   uri: 
#     url: 'https://keycloak-{{ cluster_project }}.apps.{{ domain }}/auth/admin/realms'
#     method: POST
#     body_format: json
#     headers:
#       Content-Type: "application/json"
#       Authorization: "Bearer {{TKN}}"
#     body: "{{ lookup('file', 'threescale-realm.json') }}"
#     return_content: yes
#     validate_certs: no
#     status_code: 201
#   ignore_errors: true

# - name: Create Microcks Realm
#   uri: 
#     url: 'https://keycloak-{{ cluster_project }}.apps.{{ domain }}/auth/admin/realms'
#     method: POST
#     body_format: json
#     headers:
#       Content-Type: "application/json"
#       Authorization: "Bearer {{TKN}}"
#     body: "{{ lookup('file', 'microcks-realm.json') }}"
#     return_content: yes
#     validate_certs: no
#     status_code: 201
#   ignore_errors: true